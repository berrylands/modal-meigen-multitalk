{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:modal.com)",
      "Bash(git init:*)",
      "Bash(mkdir:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git branch:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(gh issue create:*)",
      "Bash(git checkout:*)",
      "Bash(pip install:*)",
      "Bash(modal:*)",
      "Bash(python test:*)",
      "Bash(python:*)",
      "Bash(chmod:*)",
      "Bash(./run_test.sh:*)",
      "Bash(./test_all.sh)",
      "Bash(gh pr create:*)",
      "Bash(gh pr view:*)",
      "Bash(git pull:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(tree:*)",
      "Bash(echo:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(true)",
      "Bash(env)",
      "Bash(grep:*)",
      "WebFetch(domain:huggingface.co)",
      "mcp__remotion-documentation__remotion-documentation",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(gh issue close:*)",
      "Bash(gh issue comment:*)",
      "Bash(# Get download URL for completed job\necho \"\"6. Getting download URL...\"\"\ncurl -s \\\n  -H \"\"Authorization: Bearer test-api-key-123\"\" \\\n  \"\"https://berrylands--multitalk-api-fastapi-app.modal.run/api/v1/jobs/6b15f69d-85d7-4380-81b0-96f78aef29aa/download?expiration=3600\"\" | python -m json.tool | head -10\n\n# Test webhook endpoint\necho -e \"\"\\n7. Testing webhook test endpoint...\"\"\ncurl -s \\\n  -X POST \"\"https://berrylands--multitalk-api-fastapi-app.modal.run/api/v1/webhook-test\"\" \\\n  -H \"\"Authorization: Bearer test-api-key-123\"\" \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d ''{\"\"webhook_url\"\": \"\"https://webhook.site/test\"\"}'' | python -m json.tool\n\n# Check API docs availability\necho -e \"\"\\n8. API Documentation URLs:\"\"\necho \"\"   - Swagger UI: https://berrylands--multitalk-api-fastapi-app.modal.run/api/v1/docs\"\"\necho \"\"   - ReDoc: https://berrylands--multitalk-api-fastapi-app.modal.run/api/v1/redoc\"\"\necho \"\"   - OpenAPI JSON: https://berrylands--multitalk-api-fastapi-app.modal.run/api/v1/openapi.json\"\")",
      "Bash(# First deploy the CUDA app\necho \"\"1. Deploying MultiTalk CUDA model...\"\"\nmodal deploy app_multitalk_cuda.py --name multitalk-cuda 2>&1 | tail -20)",
      "Bash(# Now deploy the API\necho \"\"2. Deploying REST API...\"\"\nmodal deploy api.py --name multitalk-api)",
      "Bash(# Submit a real single-person video generation request\necho \"\"Submitting REAL video generation request with your S3 files...\"\"\necho \"\"\"\"\n\n# Single person video\necho \"\"1. Single-person video generation:\"\"\ncurl -X POST \"\"https://berrylands--multitalk-api-fastapi-app.modal.run/api/v1/generate\"\" \\\n  -H \"\"Authorization: Bearer test-api-key\"\" \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d ''{\n    \"\"prompt\"\": \"\"A person speaking naturally with clear lip sync\"\",\n    \"\"image_s3_url\"\": \"\"s3://760572149-framepack/multi1.png\"\",\n    \"\"audio_s3_urls\"\": \"\"s3://760572149-framepack/1.wav\"\",\n    \"\"options\"\": {\n      \"\"sample_steps\"\": 20,\n      \"\"resolution\"\": \"\"480p\"\"\n    }\n  }'' | python -m json.tool\n\n# Store the job ID for tracking\necho -e \"\"\\n\\nSave the job_id above to track your video generation!\"\")",
      "Bash(# Let''s test with the existing deployment\n# First check if the CUDA app can access your files\necho \"\"Testing direct CUDA function with your S3 files...\"\"\n\nmodal run app_multitalk_cuda.py::generate_video_cuda \\\n  --prompt \"\"A person speaking naturally\"\" \\\n  --image-key \"\"multi1.png\"\" \\\n  --audio-key \"\"1.wav\"\" \\\n  --sample-steps 20 2>&1 | tail -30)",
      "Bash(# Check deployed Modal apps\nmodal app list | grep multitalk)",
      "Bash(# Run the CUDA function directly with your S3 files in detached mode\necho \"\"Running REAL video generation with your S3 files...\"\"\necho \"\"Using bucket: 760572149-framepack\"\"\necho \"\"\"\"\n\nmodal run --detach app_multitalk_cuda.py::generate_video_cuda \\\n  --prompt \"\"A person speaking naturally with clear lip sync\"\" \\\n  --image-key \"\"multi1.png\"\" \\\n  --audio-key \"\"1.wav\"\" \\\n  --sample-steps 20 \\\n  --output-prefix \"\"api_test\"\")",
      "Bash(# Run the CUDA function directly with your S3 files\necho \"\"Running REAL video generation with your S3 files...\"\"\necho \"\"Using bucket: 760572149-framepack\"\"\necho \"\"Files: multi1.png and 1.wav\"\"\necho \"\"\"\"\n\nmodal run --detach app_multitalk_cuda.py::generate_video_cuda \\\n  --prompt \"\"A person speaking naturally with clear lip sync\"\" \\\n  --image-key \"\"multi1.png\"\" \\\n  --audio-key \"\"1.wav\"\" \\\n  --sample-steps 20)",
      "Bash(# Check recent Modal runs to find the output\necho \"\"Checking recent runs for video output...\"\"\nmodal run app_multitalk_cuda.py::test_two_person_conversation --help 2>&1 | head -5\n\n# Since we can''t easily get the output from detached runs, let''s check S3 directly\necho -e \"\"\\nChecking S3 for recent outputs...\"\"\naws s3 ls s3://760572149-framepack/outputs/ --recursive | grep -E \"\"multitalk.*\\.mp4\"\" | tail -10)",
      "Bash(# Wait a bit for the video to complete and check for new outputs\necho \"\"Waiting for video generation to complete...\"\"\nsleep 30\n\necho -e \"\"\\nChecking for new video outputs...\"\"\naws s3 ls s3://760572149-framepack/outputs/ --recursive | grep -E \"\"multitalk.*\\.mp4\"\" | grep \"\"$(date +%Y-%m-%d)\"\" | tail -5\n\n# Get a presigned URL for the most recent video\nLATEST_VIDEO=$(aws s3 ls s3://760572149-framepack/outputs/ --recursive | grep -E \"\"multitalk.*\\.mp4\"\" | tail -1 | awk ''{print $4}'')\n\nif [ ! -z \"\"$LATEST_VIDEO\"\" ]; then\n  echo -e \"\"\\nGenerating download URL for: $LATEST_VIDEO\"\"\n  aws s3 presign \"\"s3://760572149-framepack/$LATEST_VIDEO\"\" --expires-in 3600\nfi)",
      "Bash(# Check for outputs from the last hour\necho \"\"Checking for recent video outputs (last hour)...\"\"\nCURRENT_TIME=$(date +%s)\nONE_HOUR_AGO=$((CURRENT_TIME - 3600))\n\naws s3 ls s3://760572149-framepack/outputs/ --recursive | while read -r line; do\n  FILE_DATE=$(echo \"\"$line\"\" | awk ''{print $1\"\" \"\"$2}'')\n  FILE_NAME=$(echo \"\"$line\"\" | awk ''{print $4}'')\n  \n  # Convert file date to timestamp\n  if [[ \"\"$OSTYPE\"\" == \"\"darwin\"\"* ]]; then\n    FILE_TIMESTAMP=$(date -j -f \"\"%Y-%m-%d %H:%M:%S\"\" \"\"$FILE_DATE\"\" +%s 2>/dev/null || echo 0)\n  else\n    FILE_TIMESTAMP=$(date -d \"\"$FILE_DATE\"\" +%s 2>/dev/null || echo 0)\n  fi\n  \n  # Check if file is from last hour\n  if [ $FILE_TIMESTAMP -gt $ONE_HOUR_AGO ] && [[ $FILE_NAME == *\"\".mp4\"\" ]]; then\n    echo \"\"Recent: $FILE_DATE - $FILE_NAME\"\"\n  fi\ndone\n\n# Let''s generate a presigned URL for a known recent multi-person video\necho -e \"\"\\nGenerating URL for a recent multi-person video:\"\"\naws s3 presign \"\"s3://760572149-framepack/outputs/multitalk_2person_test_2person_20250730_102825.mp4\"\" --expires-in 3600)",
      "Bash(aws s3 ls:*)",
      "Bash(aws s3 presign:*)",
      "Bash(__NEW_LINE__ modal run app_multitalk_cuda.py::test_two_person_conversation)",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::test_two_person_conversation)",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_video_cuda )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(--sample-steps 20)",
      "Bash(__NEW_LINE__ modal run app_multitalk_cuda.py::generate_multi_person_video )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-keys \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run app_multitalk_cuda.py::generate_video_cuda )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run app_multitalk_cuda.py::generate_video_cuda )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_video_cuda )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_video_cuda )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_multi_person_video )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-keys '[\"\"1.wav\"\"]' )",
      "Bash(--output-prefix \"single_person_fix\")",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_single_person_fixed )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(--output-prefix \"single_fixed\")",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_single_person_fixed )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_single_person_fixed )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_single_person_fixed )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(__NEW_LINE__ echo -e \"\\nThe job is now running asynchronously in the background\")",
      "Bash(__NEW_LINE__ modal run --detach app_multitalk_cuda.py::generate_video_cuda )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(--prompt \"A person speaking naturally with clear lip sync\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(if grep -q \"from app_multitalk_cuda import\" \"$file\")",
      "Bash(then)",
      "Bash(sed:*)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(--prompt \"Testing after archive cleanup\" )",
      "Bash(--image-key \"multi1.png\" )",
      "Bash(--audio-key \"1.wav\" )",
      "Bash(--sample-steps 10)",
      "Bash(git rev-parse:*)",
      "Bash(gh pr comment:*)",
      "Bash(git fetch:*)"
    ],
    "deny": []
  }
}